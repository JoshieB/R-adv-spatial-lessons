[
["index.html", "R Advanced Spatial Lessons Prerequisites", " R Advanced Spatial Lessons Ben Best 2017-09-24 Prerequisites Lessons presented here are a continuation of the Geospatial workshop using R of Data Carpentry described more specifically for the Lawrence Berkeley National Lab: Sep 27-28, 2017. This content is setup for now using bookdown (using the bookdown-demo) for expediency, and meant to eventually be folded into the Software Carpentry style. "],
["tidy.html", "Lesson 1 Tidy Spatial Analysis 1.1 Overview 1.2 Things You’ll Need to Complete this Tutorial 1.3 US States: Read and Plot 1.4 Challenge: What analytical steps are required to answer the question? 1.5 US States: Analyze Attributes 1.6 US States: Recalculate Area 1.7 Pipe Operator 1.8 Challenge: Project States and Calculate Area 1.9 Key Points 1.10 Issues", " Lesson 1 Tidy Spatial Analysis Resources: Tidy spatial data in R: using dplyr, tidyr, and ggplot2 with sf 1.1 Overview Questions - How to elegantly conduct complex spatial analysis? Objectives - Use the %&gt;% operator (aka “then” or “pipe”) to pass output from one function into input of the next. - Calculate metrics on spatial attributes. - Aggregate spatial data with metrics. 1.2 Things You’ll Need to Complete this Tutorial R Skill Level: Intermediate - you’ve got basics of R down. You’ll need … We will use the sf package for vector data along with the dplyr package for calculating and manipulating attribute data. # load packages library(tidyverse) # dplyr, tidyr, ggplot2 library(sf) # vector reading &amp; analysis # set working directory to data folder # setwd(&quot;pathToDirHere&quot;) 1.3 US States: Read and Plot Similar to Lesson 9: Handling Spatial Projection &amp; CRS in R, we’ll start by reading in a polygon shapefile using the sf package. Then use the default plot() function to see what it looks like. # read in states states &lt;- read_sf(&quot;data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp&quot;) plot(states) ## Warning: plotting the first 9 out of 10 attributes; use max.plot = 10 to ## plot all You’ll notice that the default plot on sf objects outputs colorized values of the first 9 of 10 columns. Use the suggestion from the warning to plot the 10th column. # plot 10th column plot(states, max.plot = 10) # show columns of the data frame names(states) ## [1] &quot;STATEFP&quot; &quot;STATENS&quot; &quot;AFFGEOID&quot; &quot;GEOID&quot; &quot;STUSPS&quot; &quot;NAME&quot; ## [7] &quot;LSAD&quot; &quot;ALAND&quot; &quot;AWATER&quot; &quot;region&quot; &quot;geometry&quot; # look at table glimpse(states) ## Observations: 58 ## Variables: 11 ## $ STATEFP &lt;chr&gt; &quot;06&quot;, &quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;16&quot;, &quot;17&quot;, &quot;19&quot;, &quot;21&quot;, &quot;22&quot;,... ## $ STATENS &lt;chr&gt; &quot;01779778&quot;, &quot;01702382&quot;, &quot;00294478&quot;, &quot;01705317&quot;, &quot;0177... ## $ AFFGEOID &lt;chr&gt; &quot;0400000US06&quot;, &quot;0400000US11&quot;, &quot;0400000US12&quot;, &quot;0400000... ## $ GEOID &lt;chr&gt; &quot;06&quot;, &quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;16&quot;, &quot;17&quot;, &quot;19&quot;, &quot;21&quot;, &quot;22&quot;,... ## $ STUSPS &lt;chr&gt; &quot;CA&quot;, &quot;DC&quot;, &quot;FL&quot;, &quot;GA&quot;, &quot;ID&quot;, &quot;IL&quot;, &quot;IA&quot;, &quot;KY&quot;, &quot;LA&quot;,... ## $ NAME &lt;chr&gt; &quot;California&quot;, &quot;District of Columbia&quot;, &quot;Florida&quot;, &quot;Geo... ## $ LSAD &lt;chr&gt; &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;,... ## $ ALAND &lt;dbl&gt; 403483823181, 158350578, 138903200855, 148963503399, ... ## $ AWATER &lt;dbl&gt; 20483271881, 18633500, 31407883551, 4947080103, 23977... ## $ region &lt;chr&gt; &quot;West&quot;, &quot;Northeast&quot;, &quot;Southeast&quot;, &quot;Southeast&quot;, &quot;West&quot;... ## $ geometry &lt;simple_feature&gt; MULTIPOLYGONZ(((-118.593969..., MULTIPOLYG... # convert to tibble for nicer printing as_tibble(states) ## Simple feature collection with 58 features and 10 fields ## geometry type: MULTIPOLYGON ## dimension: XYZ ## bbox: xmin: -124.7258 ymin: 24.49813 xmax: -66.9499 ymax: 49.38436 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## # A tibble: 58 x 11 ## STATEFP STATENS AFFGEOID GEOID STUSPS NAME LSAD ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 06 01779778 0400000US06 06 CA California 00 ## 2 11 01702382 0400000US11 11 DC District of Columbia 00 ## 3 12 00294478 0400000US12 12 FL Florida 00 ## 4 13 01705317 0400000US13 13 GA Georgia 00 ## 5 16 01779783 0400000US16 16 ID Idaho 00 ## 6 17 01779784 0400000US17 17 IL Illinois 00 ## 7 19 01779785 0400000US19 19 IA Iowa 00 ## 8 21 01779786 0400000US21 21 KY Kentucky 00 ## 9 22 01629543 0400000US22 22 LA Louisiana 00 ## 10 24 01714934 0400000US24 24 MD Maryland 00 ## # ... with 48 more rows, and 4 more variables: ALAND &lt;dbl&gt;, AWATER &lt;dbl&gt;, ## # region &lt;chr&gt;, geometry &lt;simple_feature&gt; names(states) ## [1] &quot;STATEFP&quot; &quot;STATENS&quot; &quot;AFFGEOID&quot; &quot;GEOID&quot; &quot;STUSPS&quot; &quot;NAME&quot; ## [7] &quot;LSAD&quot; &quot;ALAND&quot; &quot;AWATER&quot; &quot;region&quot; &quot;geometry&quot; # inspect the class(es) of the states object class(states) ## [1] &quot;sf&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; The class of the states object is both a simple feature (sf) as well as a data frame, which means the many useful functions available to a data frame (or “tibble”) can be applied. To plot the column of interest, feed the “slice” of that column to the plot() function. plot(states[&#39;region&#39;]) Question: To motivate the spatial analysis for the rest of this lesson, let’s answer this question: “Show which regions have the highest ratio of water to land?” 1.4 Challenge: What analytical steps are required to answer the question? Outline a sequence of analytical steps needed to arrive at the answer. 1.4.1 Answers Sum the area of water and land per region. Divide the area of water by the area of land per region to arrive at density of water. Show table of regions sorted by density of water. Show map of regions by density of water with a color ramp and legend. 1.5 US States: Analyze Attributes regions = states %&gt;% group_by(region) %&gt;% summarize( water = sum(AWATER), land = sum(ALAND)) %&gt;% mutate( water_land = water / land) # object regions ## Simple feature collection with 5 features and 4 fields ## geometry type: GEOMETRY ## dimension: XYZ ## bbox: xmin: -124.7258 ymin: 24.49813 xmax: -66.9499 ymax: 49.38436 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## # A tibble: 5 x 5 ## region water land water_land geometry ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;simple_feature&gt; ## 1 Midwest 184383393833 1.943869e+12 0.09485380 &lt;MULTIPOLYGON...&gt; ## 2 Northeast 108922434345 8.690661e+11 0.12533273 &lt;MULTIPOLYGON...&gt; ## 3 Southeast 103876652998 1.364632e+12 0.07612063 &lt;MULTIPOLYGON...&gt; ## 4 Southwest 24217682268 1.462632e+12 0.01655761 &lt;POLYGONZ((-9...&gt; ## 5 West 57568049509 2.432336e+12 0.02366780 &lt;MULTIPOLYGON...&gt; # table regions %&gt;% st_set_geometry(NULL) %&gt;% arrange(desc(water_land)) ## # A tibble: 5 x 4 ## region water land water_land ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Northeast 108922434345 8.690661e+11 0.12533273 ## 2 Midwest 184383393833 1.943869e+12 0.09485380 ## 3 Southeast 103876652998 1.364632e+12 0.07612063 ## 4 West 57568049509 2.432336e+12 0.02366780 ## 5 Southwest 24217682268 1.462632e+12 0.01655761 # plot, default plot(regions[&#39;water_land&#39;]) # plot, ggplot ggplot(regions) + geom_sf(aes(fill = water_land)) + scale_fill_distiller(&quot;water_land&quot;, palette = &quot;Spectral&quot;) + theme_bw() + ggtitle(&quot;Ratio of Water to Land for US Regions&quot;) 1.6 US States: Recalculate Area Because in geographic coordinates, need to either transform to projection and calculate area, or use geodesic calculations. library(geosphere) ## Loading required package: sp ## Warning: package &#39;sp&#39; was built under R version 3.4.1 library(units) ## Warning: package &#39;units&#39; was built under R version 3.4.1 regions = states %&gt;% mutate( water_m2 = AWATER %&gt;% set_units(m^2), land_m2 = geometry %&gt;% st_zm() %&gt;% st_area()) %&gt;% group_by(region) %&gt;% summarize( water_m2 = sum(water_m2), land_m2 = sum(land_m2)) %&gt;% mutate( water_land = water_m2 / land_m2) # table regions %&gt;% st_set_geometry(NULL) %&gt;% arrange(desc(water_land)) ## # A tibble: 5 x 4 ## region water_m2 land_m2 water_land ## &lt;chr&gt; &lt;units&gt; &lt;units&gt; &lt;units&gt; ## 1 Northeast 108922434345 m^2 9.117041e+11 m^2 0.11947126 1 ## 2 Midwest 184383393833 m^2 1.987268e+12 m^2 0.09278233 1 ## 3 Southeast 103876652998 m^2 1.427079e+12 m^2 0.07278971 1 ## 4 West 57568049509 m^2 2.467170e+12 m^2 0.02333363 1 ## 5 Southwest 24217682268 m^2 1.483765e+12 m^2 0.01632178 1 # plot, ggplot ggplot(regions) + geom_sf(aes(fill = as.numeric(water_land))) + scale_fill_distiller(&quot;water_land&quot;, palette = &quot;Spectral&quot;) + theme_bw() + ggtitle(&quot;Ratio of Water to Land (geodesic) for US Regions &quot;) 1.7 Pipe Operator Help &gt; Keyboard Shortcuts Help. 1.8 Challenge: Project States and Calculate Area Use st_transform() USA Contiguous Albers Equal Area Conic: ESRI Projection – Spatial Reference. 1.8.1 Answers ESRI:102003 library(geosphere) library(units) # Proj4 of http://spatialreference.org/ref/esri/usa-contiguous-albers-equal-area-conic/ crs_usa = &#39;+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs&#39; regions = states %&gt;% st_transform(crs_usa) %&gt;% mutate( water_m2 = AWATER %&gt;% set_units(m^2), land_m2 = geometry %&gt;% st_zm() %&gt;% st_area()) %&gt;% group_by(region) %&gt;% summarize( water_m2 = sum(water_m2), land_m2 = sum(land_m2)) %&gt;% mutate( water_land = water_m2 / land_m2) # table regions %&gt;% st_set_geometry(NULL) %&gt;% arrange(desc(water_land)) ## # A tibble: 5 x 4 ## region water_m2 land_m2 water_land ## &lt;chr&gt; &lt;units&gt; &lt;units&gt; &lt;units&gt; ## 1 Northeast 108922434345 m^2 9.117031e+11 m^2 0.11947138 1 ## 2 Midwest 184383393833 m^2 1.987266e+12 m^2 0.09278246 1 ## 3 Southeast 103876652998 m^2 1.427078e+12 m^2 0.07278973 1 ## 4 West 57568049509 m^2 2.467167e+12 m^2 0.02333367 1 ## 5 Southwest 24217682268 m^2 1.483758e+12 m^2 0.01632185 1 # plot, ggplot ggplot(regions) + geom_sf(aes(fill = as.numeric(water_land))) + scale_fill_distiller(&quot;water_land&quot;, palette = &quot;Spectral&quot;) + theme_bw() + ggtitle(&quot;Ratio of Water to Land (geodesic) for US Regions &quot;) 1.9 Key Points Area can be calculated a variety of ways. Geodesic is preferred if starting with geographic coordinates (vs projected). 1.10 Issues sf::st_is_valid() "],
["interactive.html", "Lesson 2 Interactive Maps 2.1 Overview 2.2 Objectives 2.3 Things You’ll Need to Complete this Tutorial 2.4 States: ggplot2 2.5 States: plotly 2.6 States: mapview 2.7 States: leaflet 2.8 Pipe Operator 2.9 Challenge: Project States and Calculate Area 2.10 Key Points 2.11 Issues", " Lesson 2 Interactive Maps Resources: Visualization in R Leaflet for R - Introduction mapedit - interactively edit spatial data in R Interactive Viewing of Spatial Objects in R • mapview 2.1 Overview Questions - How do you generate interactive plots of spatial data? 2.2 Objectives 2.3 Things You’ll Need to Complete this Tutorial R Skill Level: Intermediate - you’ve got basics of R down. You’ll need … We will continue to use the sf and raster packages and introduce the leaflet package in this tutorial. # load packages library(tidyverse) # loads dplyr, tidyr, ggplot2 packages library(sf) # simple features package - vector library(raster) # raster library(leaflet) # interactive # set working directory to data folder # setwd(&quot;pathToDirHere&quot;) 2.4 States: ggplot2 # read in states states &lt;- read_sf(&quot;data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp&quot;) %&gt;% st_zm() %&gt;% mutate( water_km2 = (AWATER / (1000*1000)) %&gt;% round(1)) # plot, ggplot g = ggplot(states) + geom_sf(aes(fill = water_km2)) + scale_fill_distiller(&quot;water_land&quot;, palette = &quot;Spectral&quot;) + ggtitle(&quot;Amount of Water by State&quot;) g 2.5 States: plotly library(plotly) ggplotly(g) 2.6 States: mapview library(mapview) mapview(states) mapview(states, zcol=&#39;water_km2&#39;, burst=&#39;STUSPS&#39;) # , burst = TRUE, hide = TRUE) # , burst=T) 2.7 States: leaflet library(leaflet) leaflet(states) %&gt;% addTiles() %&gt;% addPolygons() 2.7.1 Choropleth Leaflet for R - Choropleths pal &lt;- colorBin(&quot;Blues&quot;, domain = states$water_km2, bins = 7) leaflet(states) %&gt;% addProviderTiles(&quot;Stamen.TonerLite&quot;) %&gt;% addPolygons( # fill fillColor = ~pal(water_km2), fillOpacity = 0.7, # line dashArray = &quot;3&quot;, weight = 2, color = &quot;white&quot;, opacity = 1, # interaction highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.7, bringToFront = TRUE)) 2.7.2 Popups and Legend library(htmltools) library(scales) labels &lt;- sprintf( &quot;&lt;strong&gt;%s&lt;/strong&gt;&lt;br/&gt; water: %s km&lt;sup&gt;2&lt;/sup&gt;&quot;, states$NAME, comma(states$water_km2)) %&gt;% lapply(HTML) leaflet(states) %&gt;% addProviderTiles(&quot;Stamen.TonerLite&quot;) %&gt;% addPolygons( # fill fillColor = ~pal(water_km2), fillOpacity = 0.7, # line dashArray = &quot;3&quot;, weight = 2, color = &quot;white&quot;, opacity = 1, # interaction highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% addLegend( pal = pal, values = ~water_km2, opacity = 0.7, title = HTML(&quot;Water (km&lt;sup&gt;2&lt;/sup&gt;)&quot;), position = &quot;bottomright&quot;) 2.8 Pipe Operator Help &gt; Keyboard Shortcuts Help. 2.9 Challenge: Project States and Calculate Area Use st_transform() USA Contiguous Albers Equal Area Conic: ESRI Projection – Spatial Reference. 2.9.1 Answers ESRI:102003 library(geosphere) library(units) # Proj4 of http://spatialreference.org/ref/esri/usa-contiguous-albers-equal-area-conic/ crs_usa = &#39;+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs&#39; regions = states %&gt;% st_transform(crs_usa) %&gt;% mutate( water_m2 = water_km2 %&gt;% set_units(m^2), land_m2 = geometry %&gt;% st_zm() %&gt;% st_area()) %&gt;% group_by(region) %&gt;% summarize( water_m2 = sum(water_m2), land_m2 = sum(land_m2)) %&gt;% mutate( water_land = water_m2 / land_m2) # table regions %&gt;% st_set_geometry(NULL) %&gt;% arrange(desc(water_land)) ## # A tibble: 5 x 4 ## region water_m2 land_m2 water_land ## &lt;chr&gt; &lt;units&gt; &lt;units&gt; &lt;units&gt; ## 1 Northeast 108922.9 m^2 9.117031e+11 m^2 1.194719e-07 1 ## 2 Midwest 184383.2 m^2 1.987266e+12 m^2 9.278237e-08 1 ## 3 Southeast 103876.6 m^2 1.427078e+12 m^2 7.278970e-08 1 ## 4 West 57568.0 m^2 2.467167e+12 m^2 2.333365e-08 1 ## 5 Southwest 24217.7 m^2 1.483758e+12 m^2 1.632186e-08 1 # plot, ggplot ggplot(regions) + geom_sf(aes(fill = as.numeric(water_land))) + scale_fill_distiller(&quot;water_land&quot;, palette = &quot;Spectral&quot;) + theme_bw() + ggtitle(&quot;Ratio of Water to Land (geodesic) for US Regions &quot;) 2.10 Key Points Area can be calculated a variety of ways. Geodesic is preferred if starting with geographic coordinates (vs projected). 2.11 Issues sf::st_is_valid() "],
["references.html", "References", " References "]
]
