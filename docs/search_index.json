[
["index.html", "R Advanced Spatial Lessons Prerequisites", " R Advanced Spatial Lessons Ben Best 2017-09-24 Prerequisites Lessons presented here are a continuation of the Geospatial workshop using R of Data Carpentry described more specifically for the Lawrence Berkeley National Lab: Sep 27-28, 2017. This content is setup for now using bookdown (using the bookdown-demo) for expediency, and meant to eventually be folded into the Software Carpentry style. "],
["tidy.html", "Lesson 1 Tidy Spatial Analysis 1.1 Overview 1.2 Prerequisites 1.3 States: read and plot 1.4 Challenge: analytical steps? 1.5 Regions: calculate % water 1.6 Regions: plot 1.7 Regions: ggplot 1.8 Regions: recalculate area 1.9 Challenge: project &amp; recalculate area 1.10 Key Points", " Lesson 1 Tidy Spatial Analysis 1.1 Overview Questions How to elegantly conduct complex spatial analysis by chaining operations? What is the percent area of water by region across the United States? Objectives Use the %&gt;% operator (aka “then” or “pipe”) to pass output from one function into input of the next. Calculate metrics on spatial attributes. Aggregate spatial data with metrics. Display a map of results. 1.2 Prerequisites R Skill Level: Intermediate - you’ve got basics of R down. You will use the sf package for vector data along with the dplyr package for calculating and manipulating attribute data. # load packages library(tidyverse) # load dplyr, tidyr, ggplot2 packages library(sf) # vector reading &amp; analysis # set working directory to data folder # setwd(&quot;pathToDirHere&quot;) 1.3 States: read and plot Similar to Lesson 9: Handling Spatial Projection &amp; CRS in R, we’ll start by reading in a polygon shapefile using the sf package. Then use the default plot() function to see what it looks like. # read in states states &lt;- read_sf(&quot;data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp&quot;) # plot the states plot(states) ## Warning: plotting the first 9 out of 10 attributes; use max.plot = 10 to ## plot all Notice the default plot on sf objects outputs colorized values of the first 9 of 10 columns. Use the suggestion from the warning to plot the 10th column. # plot 10th column plot(states, max.plot = 10) # show columns of the data frame names(states) ## [1] &quot;STATEFP&quot; &quot;STATENS&quot; &quot;AFFGEOID&quot; &quot;GEOID&quot; &quot;STUSPS&quot; &quot;NAME&quot; ## [7] &quot;LSAD&quot; &quot;ALAND&quot; &quot;AWATER&quot; &quot;region&quot; &quot;geometry&quot; # look at table glimpse(states) ## Observations: 58 ## Variables: 11 ## $ STATEFP &lt;chr&gt; &quot;06&quot;, &quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;16&quot;, &quot;17&quot;, &quot;19&quot;, &quot;21&quot;, &quot;22&quot;,... ## $ STATENS &lt;chr&gt; &quot;01779778&quot;, &quot;01702382&quot;, &quot;00294478&quot;, &quot;01705317&quot;, &quot;0177... ## $ AFFGEOID &lt;chr&gt; &quot;0400000US06&quot;, &quot;0400000US11&quot;, &quot;0400000US12&quot;, &quot;0400000... ## $ GEOID &lt;chr&gt; &quot;06&quot;, &quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;16&quot;, &quot;17&quot;, &quot;19&quot;, &quot;21&quot;, &quot;22&quot;,... ## $ STUSPS &lt;chr&gt; &quot;CA&quot;, &quot;DC&quot;, &quot;FL&quot;, &quot;GA&quot;, &quot;ID&quot;, &quot;IL&quot;, &quot;IA&quot;, &quot;KY&quot;, &quot;LA&quot;,... ## $ NAME &lt;chr&gt; &quot;California&quot;, &quot;District of Columbia&quot;, &quot;Florida&quot;, &quot;Geo... ## $ LSAD &lt;chr&gt; &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;, &quot;00&quot;,... ## $ ALAND &lt;dbl&gt; 403483823181, 158350578, 138903200855, 148963503399, ... ## $ AWATER &lt;dbl&gt; 20483271881, 18633500, 31407883551, 4947080103, 23977... ## $ region &lt;chr&gt; &quot;West&quot;, &quot;Northeast&quot;, &quot;Southeast&quot;, &quot;Southeast&quot;, &quot;West&quot;... ## $ geometry &lt;simple_feature&gt; MULTIPOLYGONZ(((-118.593969..., MULTIPOLYG... # convert to tibble for nicer printing as_tibble(states) ## Simple feature collection with 58 features and 10 fields ## geometry type: MULTIPOLYGON ## dimension: XYZ ## bbox: xmin: -124.7258 ymin: 24.49813 xmax: -66.9499 ymax: 49.38436 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## # A tibble: 58 x 11 ## STATEFP STATENS AFFGEOID GEOID STUSPS NAME LSAD ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 06 01779778 0400000US06 06 CA California 00 ## 2 11 01702382 0400000US11 11 DC District of Columbia 00 ## 3 12 00294478 0400000US12 12 FL Florida 00 ## 4 13 01705317 0400000US13 13 GA Georgia 00 ## 5 16 01779783 0400000US16 16 ID Idaho 00 ## 6 17 01779784 0400000US17 17 IL Illinois 00 ## 7 19 01779785 0400000US19 19 IA Iowa 00 ## 8 21 01779786 0400000US21 21 KY Kentucky 00 ## 9 22 01629543 0400000US22 22 LA Louisiana 00 ## 10 24 01714934 0400000US24 24 MD Maryland 00 ## # ... with 48 more rows, and 4 more variables: ALAND &lt;dbl&gt;, AWATER &lt;dbl&gt;, ## # region &lt;chr&gt;, geometry &lt;simple_feature&gt; names(states) ## [1] &quot;STATEFP&quot; &quot;STATENS&quot; &quot;AFFGEOID&quot; &quot;GEOID&quot; &quot;STUSPS&quot; &quot;NAME&quot; ## [7] &quot;LSAD&quot; &quot;ALAND&quot; &quot;AWATER&quot; &quot;region&quot; &quot;geometry&quot; # inspect the class(es) of the states object class(states) ## [1] &quot;sf&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; The class of the states object is both a simple feature (sf) as well as a data frame, which means the many useful functions available to a data frame (or “tibble”) can be applied. To plot the column of interest, feed the “slice” of that column to the plot() function. plot(states[&#39;region&#39;]) Question: To motivate the spatial analysis for the rest of this lesson, you will answer this question: “What is the percent water by region?” 1.4 Challenge: analytical steps? Outline a sequence of analytical steps needed to arrive at the answer. 1.4.1 Answers Sum the area of water (AWATER) and land (ALAND) per region. Divide the area of water (AWATER) by the area of land (ALAND) per region to arrive at percent water. Show table of regions sorted by percent water. Show map of regions by percent water with a color ramp and legend. 1.5 Regions: calculate % water Use the %&gt;% operator (aka “then” or “pipe”) to pass output from one function into input of the next. In RStudio, see menu Help &gt; Keyboard Shortcuts Help for a shortcut to the “Insert Pipe Operator”. Calculate metrics on spatial attributes. In RStudio, see menu Help &gt; Cheatsheets &gt; Data Manipulation with dplyr, tidyr. Aggregate spatial data with metrics. regions = states %&gt;% group_by(region) %&gt;% summarize( water = sum(AWATER), land = sum(ALAND)) %&gt;% mutate( pct_water = water / land * 100 %&gt;% round(2)) # object regions ## Simple feature collection with 5 features and 4 fields ## geometry type: GEOMETRY ## dimension: XYZ ## bbox: xmin: -124.7258 ymin: 24.49813 xmax: -66.9499 ymax: 49.38436 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## # A tibble: 5 x 5 ## region water land pct_water geometry ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;simple_feature&gt; ## 1 Midwest 184383393833 1.943869e+12 9.485380 &lt;MULTIPOLYGON...&gt; ## 2 Northeast 108922434345 8.690661e+11 12.533273 &lt;MULTIPOLYGON...&gt; ## 3 Southeast 103876652998 1.364632e+12 7.612063 &lt;MULTIPOLYGON...&gt; ## 4 Southwest 24217682268 1.462632e+12 1.655761 &lt;POLYGONZ((-9...&gt; ## 5 West 57568049509 2.432336e+12 2.366780 &lt;MULTIPOLYGON...&gt; Notice the geometry in the column. To remove the geometry column pipe to st_set_geometry(NULL). To arrange in descending order use arrange(desc(pct_water)). # table regions %&gt;% st_set_geometry(NULL) %&gt;% arrange(desc(pct_water)) ## # A tibble: 5 x 4 ## region water land pct_water ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Northeast 108922434345 8.690661e+11 12.533273 ## 2 Midwest 184383393833 1.943869e+12 9.485380 ## 3 Southeast 103876652998 1.364632e+12 7.612063 ## 4 West 57568049509 2.432336e+12 2.366780 ## 5 Southwest 24217682268 1.462632e+12 1.655761 1.6 Regions: plot Now plot the regions. # plot, default plot(regions[&#39;pct_water&#39;]) 1.7 Regions: ggplot The ggplot2 library can visualise sf objects. In RStudio, see menu Help &gt; Cheatsheets &gt; Data Visualization with ggplot2. # plot, ggplot ggplot(regions) + geom_sf(aes(fill = pct_water)) + scale_fill_distiller( &quot;pct_water&quot;, palette = &quot;Spectral&quot;, direction=1, guide = guide_legend(title = &quot;% water&quot;, reverse=T)) + theme_bw() + ggtitle(&quot;% Water by US Region&quot;) 1.8 Regions: recalculate area So far you’ve used the ALAND column for area of the state. But what if you were not provided the area and needed to calculate it? Because the states are in geographic coordinates, you’ll need to either transform to an equal area projection and calculate area, or use geodesic calculations. Thankfully, the sf library provides area calculations with the st_area() and uses the geosphere::distGeo() to perform geodesic calculations (ie trigonometric calculation accounting for the spheroid nature of the earth). Since the states data has the unusual aspect of a z dimension, you’ll need to first remove that with the st_zm() function. library(geosphere) library(units) regions = states %&gt;% mutate( water_m2 = AWATER %&gt;% set_units(m^2), land_m2 = geometry %&gt;% st_zm() %&gt;% st_area()) %&gt;% group_by(region) %&gt;% summarize( water_m2 = sum(water_m2), land_m2 = sum(land_m2)) %&gt;% mutate( pct_water = water_m2 / land_m2) # table regions %&gt;% st_set_geometry(NULL) %&gt;% arrange(desc(pct_water)) ## # A tibble: 5 x 4 ## region water_m2 land_m2 pct_water ## &lt;chr&gt; &lt;units&gt; &lt;units&gt; &lt;units&gt; ## 1 Northeast 108922434345 m^2 9.117041e+11 m^2 0.11947126 1 ## 2 Midwest 184383393833 m^2 1.987268e+12 m^2 0.09278233 1 ## 3 Southeast 103876652998 m^2 1.427079e+12 m^2 0.07278971 1 ## 4 West 57568049509 m^2 2.467170e+12 m^2 0.02333363 1 ## 5 Southwest 24217682268 m^2 1.483765e+12 m^2 0.01632178 1 # plot, ggplot ggplot(regions) + geom_sf(aes(fill = as.numeric(pct_water))) + scale_fill_distiller( &quot;pct_water&quot;, palette = &quot;Spectral&quot;, direction=1, guide = guide_legend(title = &quot;% water&quot;, reverse=T)) + theme_bw() + ggtitle(&quot;% Water by US Region&quot;) 1.9 Challenge: project &amp; recalculate area Use st_transform() with a USA Contiguous Albers Equal Area Conic Projection that minimizes distoration, and then calculate area using the st_area() function. 1.9.1 Answers library(geosphere) library(units) # Proj4 of http://spatialreference.org/ref/esri/usa-contiguous-albers-equal-area-conic/ crs_usa = &#39;+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs&#39; regions = states %&gt;% st_transform(crs_usa) %&gt;% mutate( water_m2 = AWATER %&gt;% set_units(m^2), land_m2 = geometry %&gt;% st_zm() %&gt;% st_area()) %&gt;% group_by(region) %&gt;% summarize( water_m2 = sum(water_m2), land_m2 = sum(land_m2)) %&gt;% mutate( pct_water = water_m2 / land_m2) # table regions %&gt;% st_set_geometry(NULL) %&gt;% arrange(desc(pct_water)) ## # A tibble: 5 x 4 ## region water_m2 land_m2 pct_water ## &lt;chr&gt; &lt;units&gt; &lt;units&gt; &lt;units&gt; ## 1 Northeast 108922434345 m^2 9.117031e+11 m^2 0.11947138 1 ## 2 Midwest 184383393833 m^2 1.987266e+12 m^2 0.09278246 1 ## 3 Southeast 103876652998 m^2 1.427078e+12 m^2 0.07278973 1 ## 4 West 57568049509 m^2 2.467167e+12 m^2 0.02333367 1 ## 5 Southwest 24217682268 m^2 1.483758e+12 m^2 0.01632185 1 # plot, ggplot ggplot(regions) + geom_sf(aes(fill = as.numeric(pct_water))) + scale_fill_distiller(&quot;pct_water&quot;, palette = &quot;Spectral&quot;) + theme_bw() + ggtitle(&quot;% Water (geodesic) by US Region&quot;) 1.10 Key Points The sf package can take advantage of chaining spatial operations using the %&gt;% operator. Data manipulation functions in dplyr such as group_by(), summarize() and mutate() work on sf objects. Area can be calculated a variety of ways. Geodesic is preferred if starting with geographic coordinates (vs projected). "],
["interactive.html", "Lesson 2 Interactive Maps 2.1 Overview 2.2 Things You’ll Need to Complete this Tutorial 2.3 States: ggplot2 2.4 States: plotly 2.5 States: mapview 2.6 States: leaflet 2.7 Challenge: leaflet for regions 2.8 Raster: leaflet 2.9 Key Points", " Lesson 2 Interactive Maps 2.1 Overview Questions How do you generate interactive plots of spatial data to enable pan, zoom and hover/click for more detail? Objectives Learn variety of methods for producing interactive spatial output using libraries: plotly: makes any ggplot2 object interactive mapview: quick view of any spatial object leaflet: full control over interactive map 2.2 Things You’ll Need to Complete this Tutorial R Skill Level: Intermediate - you’ve got basics of R down. We will continue to use the sf and raster packages and introduce the plotly, mapview, and leaflet packages in this tutorial. # load packages library(tidyverse) # loads dplyr, tidyr, ggplot2 packages library(sf) # simple features package - vector library(raster) # raster library(plotly) # makes ggplot objects interactive library(mapview) # quick interactive viewing of spatial objects library(leaflet) # interactive maps # set working directory to data folder # setwd(&quot;pathToDirHere&quot;) 2.3 States: ggplot2 Recreate the ggplot object from Lesson 1 and save into a variable for subsequent use with the plotly package. # read in states states &lt;- read_sf(&quot;data/NEON-DS-Site-Layout-Files/US-Boundary-Layers/US-State-Boundaries-Census-2014.shp&quot;) %&gt;% st_zm() %&gt;% mutate( water_km2 = (AWATER / (1000*1000)) %&gt;% round(2)) # plot, ggplot g = ggplot(states) + geom_sf(aes(fill = water_km2)) + scale_fill_distiller(&quot;water_km2&quot;, palette = &quot;Spectral&quot;) + ggtitle(&quot;Water (km2) by State&quot;) g 2.4 States: plotly The plotly::ggplotly() function outputs a ggplot into an interactive window capable of pan, zoom and identify. library(plotly) ggplotly(g) 2.5 States: mapview The mapview::mapview() function can work for a quick view of the data, providing choropleths, background maps and attribute popups. Performance varies on the object and customization can be tricky. library(mapview) # simple view with popups mapview(states) # coloring and layering mapview(states, zcol=&#39;water_km2&#39;, burst=&#39;STUSPS&#39;) 2.6 States: leaflet The leaflet package offers a robust set of functions for viewing vector and raster data, although requires more explicit functions. library(leaflet) leaflet(states) %&gt;% addTiles() %&gt;% addPolygons() 2.6.1 Choropleth Drawing from the documentation from Leaflet for R - Choropleths, we can construct a pretty choropleth. pal &lt;- colorBin(&quot;Blues&quot;, domain = states$water_km2, bins = 7) leaflet(states) %&gt;% addProviderTiles(&quot;Stamen.TonerLite&quot;) %&gt;% addPolygons( # fill fillColor = ~pal(water_km2), fillOpacity = 0.7, # line dashArray = &quot;3&quot;, weight = 2, color = &quot;white&quot;, opacity = 1, # interaction highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.7, bringToFront = TRUE)) 2.6.2 Popups and Legend Adding a legend and popups requires a bit more work, but achieves a very aesthetically and functionally pleasing visualization. library(htmltools) library(scales) labels &lt;- sprintf( &quot;&lt;strong&gt;%s&lt;/strong&gt;&lt;br/&gt; water: %s km&lt;sup&gt;2&lt;/sup&gt;&quot;, states$NAME, comma(states$water_km2)) %&gt;% lapply(HTML) leaflet(states) %&gt;% addProviderTiles(&quot;Stamen.TonerLite&quot;) %&gt;% addPolygons( # fill fillColor = ~pal(water_km2), fillOpacity = 0.7, # line dashArray = &quot;3&quot;, weight = 2, color = &quot;white&quot;, opacity = 1, # interaction highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% addLegend( pal = pal, values = ~water_km2, opacity = 0.7, title = HTML(&quot;Water (km&lt;sup&gt;2&lt;/sup&gt;)&quot;), position = &quot;bottomright&quot;) 2.7 Challenge: leaflet for regions Use Lesson 1 final output to create a regional choropleth with legend and popups for percent water by region. 2.7.1 Answers regions = states %&gt;% group_by(region) %&gt;% summarize( water = sum(AWATER), land = sum(ALAND)) %&gt;% mutate( pct_water = (water / land * 100) %&gt;% round(2)) pal &lt;- colorBin(&quot;Spectral&quot;, domain = regions$pct_water, bins = 5) labels &lt;- sprintf( &quot;&lt;strong&gt;%s&lt;/strong&gt;&lt;br/&gt;water: %s%%&quot;, regions$region, comma(regions$pct_water)) %&gt;% lapply(HTML) leaflet(regions) %&gt;% addProviderTiles(&quot;Stamen.TonerLite&quot;) %&gt;% addPolygons( # fill fillColor = ~pal(pct_water), fillOpacity = 0.7, # line dashArray = &quot;3&quot;, weight = 2, color = &quot;white&quot;, opacity = 1, # interaction highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% addLegend( pal = pal, values = ~pct_water, opacity = 0.7, title = &quot;water %&quot;, position = &quot;bottomright&quot;) 2.8 Raster: leaflet TODO: show raster overlay using NEON raster dataset example 2.9 Key Points Interactive maps provide more detail for visual investigation, including use of background maps, but is only relevant in a web context. Several packages exist for providing interactive views of data. The plotly::ggplotly() function works quickly if you already have a ggplot object, which is best for static output. The mapview::mapview() function can work for a quick view of the data, providing choropleths, background maps and attribute popups. Performance varies on the object and customization can be tricky. The leaflet package provides a highly customizable set of functions for rendering of interactive choropleths with background maps, legends, etc. "],
["references.html", "References", " References Tidy Spatial Analysis Tidy spatial data in R: using dplyr, tidyr, and ggplot2 with sf Interactive Maps Visualization in R - 2016-04-15-UCSB workshop leaflet mapedit mapview "]
]
